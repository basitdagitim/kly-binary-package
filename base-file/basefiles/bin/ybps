#!/bin/bash

BLUE=$'\e[0;34m'
GREEN=$'\e[0;32m'
RED=$'\e[0;31m'
CHYAN=$'\e[0;35m'
NC=$'\e[0m'


IFS=`echo -en "\t\n\b"`
indexdosyasi=($( < /etc/bps/index.lst ))
# echo ${indexdosyasi[@]}
#readarray -t lines < index #alternatif buda kullanılabilir
cat index.lst| awk -F'|' '{print substr($3,10,length($3)-10);}'>/tmp/dfile
#***************************************************************************
#************************************bps_find_package_detail**************************************
bps_find_package_detail()
{
paket="$1"
target="$2"

paketname="name=\"${paket}\""
#echo "$paket"
indexpaket=$(cat $target/etc/bps/index.lst|grep $paketname)
name=""
version=""
depends=""
dependcount="0"

if [ -n "${indexpaket}" ]
then
	namex=$(echo $indexpaket|cut -d"|" -f1)
	versionx=$(echo $indexpaket|cut -d"|" -f2)
	dependsx=$(echo $indexpaket|cut -d"|" -f3)
	filepath=$(echo $indexpaket|cut -d"|" -f4)
	address=$(echo $indexpaket|cut -d"|" -f5)
	
	name=${namex:6:-1}
	version=${versionx:9:-1}
	depends=${dependsx:9:-1}
	# Bağımlı olduğu kurulu paket sayısı
	dependcount=$(cat ${target}/var/lib/bps/index.lst |grep $paket|cut -d":" -f3|cut -d"\"" -f2|wc -l)
else
	#echo "***********${paket} Paket Bulunamadı**********"
	return
fi
echo "$name|$version|$depends|$filepath|$address|$dependcount"
}

#************************************package_install**************************************
package_install()
{
target="$2"
reinstall="$3"
IFS='|' read -r -a array <<< $(bps_find_package_detail $1 $target)
name=${array[0]}
version=${array[1]}
depends=${array[2]}
filepath=${array[3]}
address=${array[4]}
if [ -n "${name}" ]
then

	echo "********** ${GREEN} ${name}-${version} Paketi Kuruluyor  ${NC} **********"

else
	echo "***********${RED} ${1}  Paket Bulunamadı ${NC} **********"
	return
fi
if [[ -f "$target/var/lib/bps/${name}-${version}.lst" &&  "$reinstall" == "0" ]]; then echo "${BLUE} ${name}-${version}  Paketi Zaten Kurulu ${NC}"; return; fi

#echo "********** ${depends} depends Kuruluyor **********"
#return

# paket ön hazırlığı
$target/bin/busybox mkdir -p $target/tmp/bps/kur
$target/bin/busybox rm -rf $target/tmp/bps/kur/*
$target/bin/busybox mkdir -p $target/var/lib/bps
$target/bin/busybox touch $target/var/lib/bps/index.lst

# paketi indirme
#echo "${address}${filepath}/${name}-${version}.bps"
$target/bin/busybox wget -O $target/tmp/bps/kur/${name}-${version}.tar.gz "${address}${filepath}/${name}-${version}.bps" 1>$target/dev/null 2>/dev/null
if [ ! -f "$target/tmp/bps/kur/${name}-${version}.tar.gz"  ]; then echo " İndirilen paket hatalı veya indirilememiş!"; exit; fi

# paketi açma
$target/bin/busybox tar -xf $target/tmp/bps/kur/${name}-${version}.tar.gz -C $target/tmp/bps/kur/

# paketi kurma
$target/bin/busybox tar -xf $target/tmp/bps/kur/rootfs.tar.xz -C $target

#eğer daha kurulmuşsa kayıt siliniyor
$target/bin/busybox sed -i "/name=\"${name}\"/d" $target/var/lib/bps/index.lst
#name version depends /var/bps/index.lst eklenmesi
echo "name=\"${name}\":"version=\"${version}\":"depends=\"${depends}\"">>$target/var/lib/bps/index.lst
#paket içinde gelen paket dosyalarının dosya ve dizin yapısını tutan file index dosyanının /var/bps/ konumuna kopyalanması
$target/bin/busybox cp $target/tmp/bps/kur/file.index $target/var/lib/bps/${name}-${version}.lst

if [ -f "$target/tmp/bps/kur/postinstall" ]; then
	$target/bin/busybox cp $target/tmp/bps/kur/postinstall $target/var/lib/bps/${name}-${version}-postinstall
fi
if [ -f "$target/tmp/bps/kur/postremove" ]; then
	$target/bin/busybox cp $target/tmp/bps/kur/postremove $target/var/lib/bps/${name}-${version}-postremove
fi

#----------------------------------------------------------------------------------------------------
if [ -f "$target/var/lib/bps/${name}-${version}-postinstall" ]; then
	# sistem guncelleniyor
	$target/sbin/ldconfig -r $target
	sync && sleep 1
	sh $target/var/lib/bps/${name}-${version}-postinstall
fi
# ----------------------------------------------------------------------------------------------------
# sistem guncelleniyor
$target/sbin/ldconfig -r $target
echo "********** $name Paketi Kuruldu **********"
sync
}


#***************************************************************************

#***********************************package_remove***************************************
package_remove()
{
target="$2"
IFS='|' read -r -a array <<< $(bps_find_package_detail $1 $target)
paket=${array[0]} #name
version=${array[1]}
depends=${array[2]}
if [ -n "${paket}" ]
then

	echo "********** ${GREEN} ${paket}-${version} Paketi Kaldırılıyor  ${NC} **********"

else
	echo "***********${RED} ${1}  Paket Bulunamadı ${NC} **********"
	return
fi
#return 

if [ -f "$target/var/lib/bps/${paket}-${version}.lst" ]; then
	# Paketin file.lst dosyası içerisindeki dosyalar, dizinler kaldırılır.
	cat $target/var/lib/bps/${paket}-${version}.lst | while read dosya ; do
		if [[ -f "$target/$dosya" ]] ; then 
			$target/bin/busybox rm -f "$target/$dosya"; 
		fi
	done



	cat $target/var/lib/bps/${paket}-${version}.lst  | while read dizin ; do
		if [[ -d "$target/$dizin" ]] ; then
			$target/bin/busybox rmdir "$target/$dizin" || true
		fi
	done
fi
#/var/bps/paket-version.lst dosyasından paket bilgisi kaldırılır.
$target/bin/busybox rm -f $target/var/lib/bps/${paket}-${version}.lst

#/var/lib/bps/index.lst dosyasından ilgili paket satırı kaldırılır.
$target/bin/busybox sed -i "/name=\"${paket}\"/d" $target/var/lib/bps/index.lst
# sistem guncelleniyor
$target/sbin/ldconfig
echo "********** ${paket}-${version}  Paketi Kaldırıldı **********"
# ------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------
if [ -f "$target/var/lib/bps/${name}-${version}-postremove" ]; then
	sh $target/var/lib/bps/${name}-${version}-postremove
fi
# ------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------
sync
}


#-------------------------------------------removedependspackage
removefinddepends()
{
target="$2"
FS=',' read -r -a array <<< "$1"
for item in "${array[@]}"
do
#echo "paket: $item"

if [[  $(echo ${indexdosyasi[@]} | grep -F "name=\"$item\"") ]]
then
	#cat index.lst|grep "name=\"readline\""
	#a=$(printf '%s\0' ${indexdosyasi[@]}|grep -wz "name=\"openssh\"")
	namex=$(cat $target/etc/bps/index.lst| grep -F "name=\"$item\""|cut -d "|" -f1)
	name=${namex:6:-1}
	#versionx=$(cat index| grep -F "name=\"$item\""|cut -d "|" -f2)
	#version=${versionx:9:-1}
	dependx=$(cat $target/etc/bps/index.lst| grep -F "name=\"$item\""|cut -d "|" -f3)
	depend=${dependx:9:-1}
	
	#echo $name
	#echo $version
	#echo $depend
	#if [ ! -f "$item" ]; then continue; fi
		sed -i "/$item/d" $target/tmp/removepackage
		#exit
		#sed -i "/$item/d" /tmp/removedependspackage
		#echo "$item">>/tmp/removedependspackage
		
	#tempaket=$(cat $item|grep depends)
	#resultpaket=${tempaket:9:-1}
	#echo ${b}
	installfinddepends ${depend} $target
fi

done
}

#-------------------------------------------
installfinddepends()
{
target="$2"
IFS=',' read -r -a array <<< "$1"
for item in "${array[@]}"
do
#echo "paket: $item"

if [[  $(echo ${indexdosyasi[@]} | grep -F "name=\"$item\"") ]]
then
	#cat index.lst|grep "name=\"readline\""
	namex=$(cat $target/etc/bps/index.lst| grep -F "name=\"$item\""|cut -d "|" -f1)
	name=${namex:6:-1}
	#versionx=$(cat index| grep -F "name=\"$item\""|cut -d "|" -f2)
	#version=${versionx:9:-1}
	dependx=$(cat $target/etc/bps/index.lst| grep -F "name=\"$item\""|cut -d "|" -f3)
	depend=${dependx:9:-1}
	
	#echo $name
	#echo $version
	#echo $depend
	#if [ ! -f "$item" ]; then continue; fi

	sed -i "/$item/d" $target/tmp/dependspackage
	echo "$item">>$target/tmp/dependspackage
	#tempaket=$(cat $item|grep depends)
	#resultpaket=${tempaket:9:-1}
	#echo ${b}
	installfinddepends ${depend} $target
fi

done
}

#-------------------------------------------
getdepends()
{
target="$2"
>$target/tmp/dependspackage
installfinddepends "$1" "$target"
#echo "Paket ve Bağımlılıkları:"
#cat /tmp/dependspackage
}



remove_package_depends()
{
target="$2"
mainpackage="$1"
cp $target/tmp/dependspackage $target/tmp/removepackage
>$target/tmp/exremovepackage
while IFS= read -r dependspackage_line
do

	if  [[ ! $(cat $target/tmp/removepackage | grep -F $dependspackage_line) ]];then echo "paket önceden silinmiş";continue;fi

	#echo "$dependspackage_line Paketine Bağımlı olan Paketler" 
	#cat /tmp/dfile | grep -nF $dependspackage_line|cut -d: -f1
	dependsfilenumber=$(cat $target/tmp/dfile | grep -nF $dependspackage_line|cut -d: -f1)
	#echo ${dependsfilenumber[@]}
	for dependssatir in ${dependsfilenumber[@]}
	do
		#echo $dependssatir
		namex=$(echo "${indexdosyasi[dependssatir-1]}"|cut -d '|' -f1)
		name=${namex:6:-1}
		#echo -e "\t$name"
		if [[ ! $(cat $target/tmp/removepackage | grep -F $name) ]]
		then
			if [[ "$dependspackage_line" == "$mainpackage" ]]
			then
			 	#echo "ana pakage : $dependspackage_line $name"
			 	echo "$name">>$target/tmp/exremovepackage
			fi
			
		#echo -e "\t\t$name paketi  $dependspackage_line paketine bağımlı $dependspackage_line kaldırılamaz"
		#>/tmp/removedependspackage
		removefinddepends "$dependspackage_line"
		fi
	done

done < "$target/tmp/dependspackage"

}

do_remove()
{
target="$2"


while IFS= read -r paket
do
	if [ "$paket" == "base-file" ]; then echo "${CHYAN} ${paket} Paketi Sistemin Temel Paketidir. Silinemez. ${NC}"; return; fi
	if [ "$paket" == "glibc" ]; then echo "${CHYAN} ${paket} Paketi Sistemin Temel Paketidir. Silinemez. ${NC}"; return; fi
	if [ "$paket" == "readline" ]; then echo "${CHYAN} ${paket} Paketi Sistemin Temel Paketidir. Silinemez. ${NC}"; return; fi
	if [ "$paket" == "ncurses" ]; then echo "${CHYAN} ${paket} Paketi Sistemin Temel Paketidir. Silinemez. ${NC}"; return; fi

	#------------------------------------------------------------------
	IFS='|' read -r -a array <<< $(bps_find_package_detail $paket $target)
	name=${array[0]}
	version=${array[1]}
	depends=${array[2]}
	filepath=${array[3]}
	address=${array[4]}
	if [ ! -f "$target/var/lib/bps/${name}-${version}.lst" ]; then echo "${BLUE} ${name}-${version}  Paketi Kurulu Değil ${NC}"; return; fi
	echo "Bağımlılıkları: $depends"

	#-------------------------------------------------------------------

	#echo "Silinecek paket $item" "$target"
	 package_remove "$paket" "$target"
	
done < $1
}

do_install()
{
target="$2"
reinstall="$3"
while IFS= read -r paket
do
	#echo "Yüklenecek paket $paket"
	package_install $paket $target $reinstall
	
done < $1
}

get_remove_depends()
{
paket="$1"
target="$2"
reinstall="$3"
getdepends "$1" "$target"
echo "Paket ve Bağımlılıkları:"
cat $target/tmp/dependspackage

#echo "Muhtemel Kaldırılacak Paket ve Bağımlılıkları"
remove_package_depends "$1" "$target"

if [[ "$(cat $target/tmp/removepackage|wc -l)" == "0" ]]
then
#	echo "Kaldırılacak Paket Listesi Boş"
	echo "$1 Paketine Bağımlı Olan Kaldırılacak Paketler"
	do_remove $target/tmp/exremovepackage "$target" "$reinstall"
	#getremove_depends "$1"
else
	echo "Kaldırılacak Paket ve Bağımlılıkları"
	do_remove $target/tmp/removepackage "$target" "$reinstall"
fi
}

get_install_depends()
{
paket="$1"
target="$2"
reinstall="$3"
getdepends "$1" $target
echo "Paket ve Bağımlılıkları:"
cat $target/tmp/dependspackage
do_install $target/tmp/dependspackage "$target" "$reinstall"
}

#echo ${dependsfile[@]}
#time get_remove_depends "openssh"
#time get_install_depends "openssh"
#************************************bps_help************************************************
bps_help()
{
     echo -e "Usage: bps <options>"
     echo -e " -u,--update\t\t\t: package index update.	use: bps -u	"
     echo -e " -c,  --create\t\t\t: create bps package.	use: bps -c	packagedirectory target(default=/)"
     echo -e " -i,  --install\t\t\t: package install.	use: bps -i	packagename target(default=/)"
     echo -e " -ri,  --reinstall\t\t: package install.	use: bps -ri	packagename target(default=/)"
     echo -e " -pi\t\t\t\t: packagefile install.	use: bps -pi	packagefile target"
     echo -e " -r,  --remove\t\t\t: package remove.	use: bps -r	packagename  target(default=/)"
     echo -e " -h,  --help\t\t\t: bps help"

}

#***************************************main********************************************************
for arg in $@ ; do
    if [[ "$arg" == "--update" || "$arg" == "-u" ]] ; then
    		if [ -n "${2}" ]
			then
				echo "Güncelleme Konumu: $2";bps_update $2
			else
				bps_update "/"
		fi
     elif [[ "$arg" == "--create" || "$arg" == "-c" ]] ; then
        	if [ -n "${3}" ]
			then
				echo "Paket Oluşturma Konumu: $3"; bps_create_package $2 "$3"
			else
				bps_create_package $2 "/"
		fi
    elif [[ "$arg" == "--install" || "$arg" == "-i" ]] ; then
		if [ -n "${3}" ]
			then
				echo "Paket Kurulum Konumu: $3"; 
				#bps_install $2 "$3" "0"
				get_install_depends $2 "$3" "0"
			else
				#bps_install $2 "/" "0"
				get_install_depends $2 "/" "0"
		fi
    elif [[ "$arg" == "--reinstall" || "$arg" == "-ri" ]] ; then
		if [ -n "${3}" ]
			then
				echo "Paket Kurulum Konumu: $3"; package_install $2 "$3" "1"
			else
				package_install $2 "/" "1"
		fi
 
    elif [[ "$arg" == "--packeinstall" || "$arg" == "-pi" ]] ; then
        bps_packegefileinstall $2 $3
    
    elif [[ "$arg" == "--packeinstalldepends" || "$arg" == "-pdi" ]] ; then
        bps_package_depends_install $2 "/" "0"
 
    elif [[ "$arg" == "--remove" || "$arg" == "-r" ]] ; then
        	if [ -n "${3}" ]
			then
				echo "Paket Kaldırma Konumu: $2"; get_remove_depends $2 "$3"
			else
				get_remove_depends $2 "/"
		fi
    elif [[ "$arg" == "--help" || "$arg" == "-h" ]] ; then
        bps_help
      fi
done
